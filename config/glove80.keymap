#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>

#define OPERATING_SYSTEM 'W' // choose 'L'inux, 'M'acOS, or 'W'indows
#define ENABLE_MOUSE_KEYS

#if OPERATING_SYSTEM == 'M'
    #define _C      LG
    #define _A_TAB  LGUI
    #define _G_TAB  LALT
    #define _REDO   LG(LS(Z))
    #define _POWER  K_POWER
    #define _WORD   LA
    #define _HOME   LG(LEFT)
    #define _END    LG(RIGHT)
    #define _EMOJI  LG(LC(SPACE))
    #define _FILES  LS(LA(M))
    #define _GLOBE  GLOBE
#else
    #define _C      LC
    #define _A_TAB  LALT
    #define _G_TAB  LGUI
    #define _REDO   LC(Y)
    #define _POWER  C_POWER
    #define _WORD   LC
    #define _HOME   HOME
    #define _END    END
    #define _EMOJI  LG(DOT)
    #define _FILES  LG(E)
    #define _GLOBE  LGUI
#endif
#define _SLEEP      C_SLEEP
#if OPERATING_SYSTEM == 'W'
    #define _LOCK   LG(L)
#elif OPERATING_SYSTEM == 'M'
    #define _LOCK   _C(LC(Q))
#elif OPERATING_SYSTEM == 'L'
    #define _LOCK   K_LOCK
#endif

#define _UNDO       _C(Z)
#define _CUT        _C(X)
#define _COPY       _C(C)
#define _PASTE      _C(V)
#define _FIND       _C(F)
#define _FIND_NEXT  _C(G)
#define _FIND_PREV  _C(LS(G))

#define HYPER _C(LS(LG(LALT)))
#define NEXT_TAB _C(TAB)
#define PREV_TAB _C(LS(TAB))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

macros {
  ZMK_MACRO(dot_dot,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings = <&macro_tap &kp DOT &kp DOT>;
  )
}

//------------------------------------------------------------------------
//
// Mouse configuration
//
//------------------------------------------------------------------------

//
// NATURAL_SCROLLING reverses the directionality of the mouse scroll wheel
// to support "natural scrolling" in macOS and other desktop environments.
//
//#define NATURAL_SCROLLING

#ifdef NATURAL_SCROLLING
    #define MOUSE_SCROLL_UP    SCRL_DOWN
    #define MOUSE_SCROLL_DOWN  SCRL_UP
    #define MOUSE_SCROLL_LEFT  SCRL_RIGHT
    #define MOUSE_SCROLL_RIGHT SCRL_LEFT
#else
    #define MOUSE_SCROLL_UP    SCRL_UP
    #define MOUSE_SCROLL_DOWN  SCRL_DOWN
    #define MOUSE_SCROLL_LEFT  SCRL_LEFT
    #define MOUSE_SCROLL_RIGHT SCRL_RIGHT
#endif

//
// MOUSE_MOTION_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//

#ifndef MOUSE_MOTION_DELAY
#define MOUSE_MOTION_DELAY 0
#endif

//
// MOUSE_MOTION_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_MOTION_ACCELERATION_EXPONENT
#define MOUSE_MOTION_ACCELERATION_EXPONENT 1
#endif

//
// MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED
#define MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED 300
#endif

//
// MOUSE_MOTION_MAXIMUM_SPEED defines how quickly the mouse pointer can move.
//
#ifndef MOUSE_MOTION_MAXIMUM_SPEED
#define MOUSE_MOTION_MAXIMUM_SPEED 600
#endif

//
// MOUSE_SCROLL_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#ifndef MOUSE_SCROLL_DELAY
#define MOUSE_SCROLL_DELAY 0
#endif

//
// MOUSE_SCROLL_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_SCROLL_ACCELERATION_EXPONENT
#define MOUSE_SCROLL_ACCELERATION_EXPONENT 0
#endif

//
// MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED
#define MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED 300
#endif

//
// MOUSE_SCROLL_MAXIMUM_SPEED defines how quickly the mouse wheel can scroll.
//
#ifndef MOUSE_SCROLL_MAXIMUM_SPEED
#define MOUSE_SCROLL_MAXIMUM_SPEED 10
#endif

//
// MOUSE_SCALER_FINE sets parameters for the &zip_xy_scaler input processor:
// https://zmk.dev/docs/keymaps/input-processors/scaler
//
#ifndef MOUSE_SCALER_FINE
#define MOUSE_SCALER_FINE 1 16
#endif

//
// MOUSE_SCALER_SLOW sets parameters for the &zip_xy_scaler input processor:
// https://zmk.dev/docs/keymaps/input-processors/scaler
//
#ifndef MOUSE_SCALER_SLOW
#define MOUSE_SCALER_SLOW 1 4
#endif

//
// MOUSE_SCALER_FAST sets parameters for the &zip_xy_scaler input processor:
// https://zmk.dev/docs/keymaps/input-processors/scaler
//
#ifndef MOUSE_SCALER_FAST
#define MOUSE_SCALER_FAST 4 1
#endif

//
// MOUSE_SCALER_WARP sets parameters for the &zip_xy_scaler input processor:
// https://zmk.dev/docs/keymaps/input-processors/scaler
//
#ifndef MOUSE_SCALER_WARP
#define MOUSE_SCALER_WARP 12 1
#endif

//
// Mouse configuration
//

#undef ZMK_POINTING_DEFAULT_MOVE_VAL
#define ZMK_POINTING_DEFAULT_MOVE_VAL MOUSE_MOTION_MAXIMUM_SPEED
#undef ZMK_POINTING_DEFAULT_SCRL_VAL
#define ZMK_POINTING_DEFAULT_SCRL_VAL MOUSE_SCROLL_MAXIMUM_SPEED

&mmv {
    delay-ms = <MOUSE_MOTION_DELAY>;
    acceleration-exponent = <MOUSE_MOTION_ACCELERATION_EXPONENT>;
    time-to-max-speed-ms = <MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED>;
};

&msc {
    delay-ms = <MOUSE_SCROLL_DELAY>;
    acceleration-exponent = <MOUSE_SCROLL_ACCELERATION_EXPONENT>;
    time-to-max-speed-ms = <MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED>;
};

//
// Scaling for mouse movement, based on @caksoylar's example:
// https://github.com/caksoylar/zmk-config/commit/0020c23c544cd7111013f0114609d1fb90e0e475
//
&mmv_input_listener {
    #ifdef LAYER_MouseFine
    fine {
        layers = <LAYER_MouseFine>;
        input-processors = <&zip_xy_scaler MOUSE_SCALER_FINE>;
    };
    #endif
    #ifdef LAYER_MouseSlow
    slow {
        layers = <LAYER_MouseSlow>;
        input-processors = <&zip_xy_scaler MOUSE_SCALER_SLOW>;
    };
    #endif
    #ifdef LAYER_MouseFast
    fast {
        layers = <LAYER_MouseFast>;
        input-processors = <&zip_xy_scaler MOUSE_SCALER_FAST>;
    };
    #endif
    #ifdef LAYER_MouseWarp
    warp {
        layers = <LAYER_MouseWarp>;
        input-processors = <&zip_xy_scaler MOUSE_SCALER_WARP>;
    };
    #endif
};

//
// Scaling for mouse scrolling, based on @caksoylar's example:
// https://github.com/caksoylar/zmk-config/commit/e35ee2f08788927683df7bbdd7fc73434473886e
//
/ {
    input_processors {
        zip_scroll_scaling_processor: zip_scroll_scaling_processor {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
        };
    };
};
&msc_input_listener {
    #ifdef LAYER_MouseFine
    fine {
        layers = <LAYER_MouseFine>;
        input-processors = <&zip_scroll_scaling_processor MOUSE_SCALER_FINE>;
    };
    #endif
    #ifdef LAYER_MouseSlow
    slow {
        layers = <LAYER_MouseSlow>;
        input-processors = <&zip_scroll_scaling_processor MOUSE_SCALER_SLOW>;
    };
    #endif
    #ifdef LAYER_MouseFast
    fast {
        layers = <LAYER_MouseFast>;
        input-processors = <&zip_scroll_scaling_processor MOUSE_SCALER_FAST>;
    };
    #endif
    #ifdef LAYER_MouseWarp
    warp {
        layers = <LAYER_MouseWarp>;
        input-processors = <&zip_scroll_scaling_processor MOUSE_SCALER_WARP>;
    };
    #endif
};

//------------------------------------------------------------------------
//
// Main
//
//------------------------------------------------------------------------

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        home_row_mod_left: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 55 38 37 36 35>;
        };

        home_row_mod_right: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 41 42 43 44>;
        };

        thumb_layer: thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };
    };

    macros {
        //------------------------------------------------------------------------
        //
        // RGB and Bluetooth
        //
        //------------------------------------------------------------------------

        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        //------------------------------------------------------------------------
        //
        // Cursor macros
        //
        //------------------------------------------------------------------------

        //
        // SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
        // after moving the cursor before it selects a word.  A larger delay
        // may allow the macro to move to the next word upon each invocation.
        //
        #ifndef SELECT_WORD_DELAY
        #define SELECT_WORD_DELAY 1
        #endif

        #define select_all kp _C(A)

        ZMK_MACRO(select_none,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
        )

        //
        // select a word (jumps to next word upon each successive invocation)
        //
        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_word_right>, <&select_word_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(select_word_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _WORD(RIGHT) &kp _WORD(LEFT) &kp _WORD(LS(RIGHT))>;
        )
        ZMK_MACRO(select_word_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _WORD(LEFT) &kp _WORD(RIGHT) &kp _WORD(LS(LEFT))>;
        )

        //
        // extend current selection by one word
        //
        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_word_right>, <&extend_word_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(extend_word_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _WORD(LS(RIGHT))>;
        )
        ZMK_MACRO(extend_word_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _WORD(LS(LEFT))>;
        )

        //
        // select current line
        //
        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&select_line_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(select_line_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _HOME &kp LS(_END)>;
        )
        ZMK_MACRO(select_line_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _END &kp LS(_HOME)>;
        )

        //
        // extend current selection by one line
        //
        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_right>, <&extend_line_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(extend_line_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LS(DOWN) &kp LS(_END)>;
        )
        ZMK_MACRO(extend_line_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LS(UP) &kp LS(_HOME)>;
        )
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1            &kp F2  &kp F3                         &kp F4                             &kp F5                                                                                                                                                             &kp F6                             &kp F7                               &kp F8                           &kp F9    &kp F10
&kp ESCAPE        &kp N1  &kp N2                         &kp N3                             &kp N4                           &kp N5                                                                                                                    &kp N6  &kp N7                             &kp N8                               &kp N9                           &kp N0    &kp BACKSPACE
&kp TAB           &kp Q   &kp W                          &kp E                              &kp R                            &kp T                                                                                                                     &kp Y   &kp U                              &kp I                                &kp O                            &kp P     &kp BSLH
&kp LEFT_CONTROL  &kp A   &home_row_mod_left LEFT_ALT S  &home_row_mod_left LEFT_CONTROL D  &home_row_mod_left LEFT_SHIFT F  &kp G                                                                                                                     &kp H   &home_row_mod_right RIGHT_SHIFT J  &home_row_mod_right RIGHT_CONTROL K  &home_row_mod_right RIGHT_ALT L  &kp SEMI  &kp ENTER
&kp LEFT_SHIFT    &kp Z   &kp X                          &kp C                              &kp V                            &kp B   &caps_word                &kp LALT              &none       &none       &kp LEFT_GUI        &kp UNDER             &kp N   &kp M                              &kp COMMA                            &kp DOT                          &kp FSLH  &kp RIGHT_SHIFT
&magic 6 0        &none   &kp UP_ARROW                   &kp DOWN_ARROW                     &none                                    &thumb_layer 2 BACKSPACE  &thumb_layer 4 ENTER  &kp DELETE  &kp ESCAPE  &thumb_layer 3 TAB  &thumb_layer 1 SPACE          &none                              &kp LEFT_ARROW                       &kp RIGHT_ARROW                  &none     &none
            >;
        };

        symbols {
            bindings = <
&none  &none      &none      &none         &none                                                                                                           &none                 &none                  &none      &none         &none
&none  &none      &none      &none         &none          &none                                                                         &none              &kp LESS_THAN         &kp GREATER_THAN       &kp MINUS  &none         &none
&none  &kp PG_UP  &none      &kp UP_ARROW  &none          &kp PAGE_DOWN                                                                 &kp GRAVE          &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp HASH   &kp CARET     &none
&none  &kp HOME   &kp LEFT   &kp DOWN      &kp RIGHT      &kp END                                                                       &kp DOUBLE_QUOTES  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS  &kp SLASH     &kp EXCL
&none  &none      &kp ENTER  &kp SPACE     &kp BACKSPACE  &kp DELETE     &none  &none  &none  &kp AMPERSAND  &kp SEMICOLON  &kp DOLLAR  &kp SINGLE_QUOTE   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PLUS   &kp ASTERISK  &kp PERCENT
&none  &none      &none      &none         &none                         &none  &none  &none  &kp AT_SIGN    &kp COLON      &kp EQUAL                      &none                 &kp PIPE               &kp TILDE  &none         &none
            >;
        };

        cursor {
            bindings = <
&trans  &trans  &trans        &trans          &trans                                                                            &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans        &trans          &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans        &trans          &trans            &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans        &trans          &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans        &trans          &trans                    &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans          &trans          &trans          &trans                                                                                       &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans          &trans          &trans           &trans                                                              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &trans                                                              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP                                                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans          &trans          &trans           &trans        &mkp MCLK  &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans          &trans          &trans                         &mkp LCLK  &mkp RCLK  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        numpad {
            bindings = <
&none  &none  &none  &none  &none                                                          &none         &none         &none         &none  &none
&none  &none  &none  &none  &none  &none                                            &none  &none         &none         &none         &none  &none
&none  &none  &none  &none  &none  &none                                            &none  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &none  &none
&none  &none  &none  &none  &none  &none                                            &none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &kp N7        &kp N8        &kp N9        &none  &none
&none  &none  &none  &none  &none         &none  &none  &none  &none  &none  &none         &none         &none         &none         &none  &none
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        symbols_left {
            bindings = <
&none  &none        &none            &none          &none                                                                                        &none          &none      &none      &none  &none
&none  &none        &none            &none          &none             &none                                                          &none       &none          &none      &none      &none  &none
&none  &kp HASH     &kp CARET        &kp LESS_THAN  &kp GREATER_THAN  &kp PIPE                                                       &none       &none          &kp UP     &none      &none  &none
&none  &kp AT_SIGN  &kp EXCLAMATION  &kp PLUS       &kp MINUS         &kp AMPERSAND                                                  &none       &kp LEFT       &kp DOWN   &kp RIGHT  &none  &none
&none  &kp TILDE    &kp PERCENT      &kp ASTERISK   &kp SLASH         &kp PERCENT    &trans     &trans  &trans  &none  &none  &none  &kp DELETE  &kp BACKSPACE  &kp SPACE  &kp ENTER  &none  &none
&none  &none        &none            &none          &none                            &kp EQUAL  &trans  &trans  &none  &none  &none              &none          &none      &none      &none  &none
            >;
        };

        symbols_right {
            bindings = <
&none  &none  &none      &none         &none                                                                                   &none                 &none                  &none          &none  &none
&none  &none  &none      &none         &none          &none                                                 &none              &none                 &none                  &none          &none  &none
&none  &none  &none      &kp UP_ARROW  &none          &none                                                 &kp GRAVE          &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOLLAR     &none  &none
&none  &none  &kp LEFT   &kp DOWN      &kp RIGHT      &none                                                 &kp DOUBLE_QUOTES  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON      &none  &none
&none  &none  &kp ENTER  &kp SPACE     &kp BACKSPACE  &kp DELETE  &none  &none  &none  &none  &none  &none  &kp SINGLE_QUOTE   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SEMICOLON  &none  &none
&none  &none  &none      &none         &none                      &none  &none  &none  &none  &none  &none                     &none                 &none                  &none          &none  &none
            >;
        };
    };
};
