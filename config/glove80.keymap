#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define LAYER_MouseFine 5
#define LAYER_MouseSlow 6
#define LAYER_MouseFast 7
#define LAYER_MouseWarp 8

#include "mouse.dtsi"
#include "defs.dtsi"

//------------------------------------------------------------------------
//
// Main
//
//------------------------------------------------------------------------

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        home_row_mod_left: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 55 38 37 36 35>;
        };

        home_row_mod_right: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 41 42 43 44>;
        };

        thumb_layer: thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };
    };

    macros {
        //------------------------------------------------------------------------
        //
        // RGB and Bluetooth
        //
        //------------------------------------------------------------------------

        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        //------------------------------------------------------------------------
        //
        // Cursor macros
        //
        //------------------------------------------------------------------------
        //
        // SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
        // after moving the cursor before it selects a word.  A larger delay
        // may allow the macro to move to the next word upon each invocation.
        //

        #ifndef SELECT_WORD_DELAY
        #define SELECT_WORD_DELAY 1
        #endif

        #define select_all kp _C(A)

        ZMK_MACRO(

        select_none,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;

        )

        //
        // select a word (jumps to next word upon each successive invocation)
        //

        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_word_right>, <&select_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ZMK_MACRO(

        select_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _WORD(RIGHT) &kp _WORD(LEFT) &kp _WORD(LS(RIGHT))>;

        )
        ZMK_MACRO(

        select_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _WORD(LEFT) &kp _WORD(RIGHT) &kp _WORD(LS(LEFT))>;

        )

        //
        // extend current selection by one word
        //

        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_word_right>, <&extend_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ZMK_MACRO(

        extend_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _WORD(LS(RIGHT))>;

        )
        ZMK_MACRO(

        extend_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _WORD(LS(LEFT))>;

        )

        //
        // select current line
        //

        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&select_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ZMK_MACRO(

        select_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _HOME &kp LS(_END)>;

        )
        ZMK_MACRO(

        select_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _END &kp LS(_HOME)>;

        )

        //
        // extend current selection by one line
        //

        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_right>, <&extend_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        alt_tap_dance: alt_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&kp RIGHT_ALT>;
        };

        ZMK_MACRO(

        extend_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(DOWN) &kp LS(_END)>;

        )
        ZMK_MACRO(

        extend_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(UP) &kp LS(_HOME)>;

        )
    };

    combos {
        compatible = "zmk,combos";

        kl {
            bindings = <&kp UNDERSCORE>;
            key-positions = <43 42>;
            layers = <0 1>;
        };

        jk {
            bindings = <&kp UNDERSCORE>;
            key-positions = <41 42>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1            &kp F2  &kp F3                         &kp F4                             &kp F5                                                                                                                                                                        &kp F6                             &kp F7                               &kp F8                           &kp F9    &kp F10
&kp ESCAPE        &kp N1  &kp N2                         &kp N3                             &kp N4                           &kp N5                                                                                                                               &kp N6  &kp N7                             &kp N8                               &kp N9                           &kp N0    &kp BACKSPACE
&kp TAB           &kp Q   &kp W                          &kp E                              &kp R                            &kp T                                                                                                                                &kp Y   &kp U                              &kp I                                &kp O                            &kp P     &kp BSLH
&kp LEFT_CONTROL  &kp A   &home_row_mod_left LEFT_ALT S  &home_row_mod_left LEFT_CONTROL D  &home_row_mod_left LEFT_SHIFT F  &kp G                                                                                                                                &kp H   &home_row_mod_right RIGHT_SHIFT J  &home_row_mod_right RIGHT_CONTROL K  &home_row_mod_right RIGHT_ALT L  &kp SEMI  &kp ENTER
&kp LEFT_SHIFT    &kp Z   &kp X                          &kp C                              &kp V                            &kp B   &alt_tap_dance            &kp LEFT_GUI          &none                  &none       &none               &kp CAPS              &kp N   &kp M                              &kp COMMA                            &kp DOT                          &kp FSLH  &kp RIGHT_SHIFT
&magic 11 0       &none   &kp UP_ARROW                   &kp DOWN_ARROW                     &none                                    &thumb_layer 1 BACKSPACE  &thumb_layer 3 ENTER  &thumb_layer 9 DELETE  &kp ESCAPE  &thumb_layer 4 TAB  &thumb_layer 2 SPACE          &none                              &kp LEFT_ARROW                       &kp RIGHT_ARROW                  &none     &none
            >;
        };

        navnum {
            bindings = <
&none        &none      &none       &none      &none                                                                                                     &none   &none           &none   &none        &none
&none        &none      &none       &none      &none          &none                                                                        &kp CARET     &none   &none           &none   &none        &kp AT
&none        &kp PG_UP  &kp _PASTE  &kp UP     &kp _COPY      &kp PG_DN                                                                    &kp ASTERISK  &kp N4  &kp N5          &kp N6  &kp SLASH    &kp DOLLAR
&none        &kp HOME   &kp LEFT    &kp DOWN   &kp RIGHT      &kp END                                                                      &kp PLUS      &kp N1  &kp N2          &kp N3  &kp MINUS    &kp TILDE
&kp LS(TAB)  &kp TAB    &kp ENTER   &kp SPACE  &kp BACKSPACE  &kp DELETE  &none  &none  &none  &kp LESS_THAN  &kp GREATER_THAN  &kp EQUAL  &kp COLON     &kp N7  &kp N8          &kp N9  &kp PERCENT  &kp HASH
&none        &none      &none       &none      &none                      &none  &none  &none  &kp COMMA      &kp PERIOD        &kp N0                   &none   &kp UNDERSCORE  &none   &none        &none
            >;
        };

        symbols {
            bindings = <
&none            &none         &none      &none                 &none                                                                                                            &none          &none      &none      &none      &none
&none            &none         &kp MINUS  &kp LESS_THAN         &kp GREATER_THAN       &none                                                                         &none       &none          &none      &none      &none      &none
&none            &kp CARET     &kp HASH   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOUBLE_QUOTES                                                             &none       &kp LEFT       &kp UP     &kp DOWN   &kp RIGHT  &none
&kp EXCLAMATION  &kp SLASH     &kp MINUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SINGLE_QUOTE                                                              &kp DELETE  &kp BACKSPACE  &kp SPACE  &kp ENTER  &kp TAB    &kp LS(TAB)
&kp PERCENT      &kp ASTERISK  &kp PLUS   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GRAVE          &kp AMPERSAND  &kp SEMI   &kp DOLLAR  &none  &none  &none  &none       &none          &none      &none      &none      &none
&none            &none         &kp TILDE  &kp PIPE              &none                                     &kp EQUAL      &kp COLON  &kp AT      &none  &none  &none              &none          &none      &none      &none      &none
            >;
        };

        cursor {
            bindings = <
&none        &none      &none       &none      &none                                                                            &none             &none           &none           &none         &none
&none        &none      &none       &none      &none          &none                                                 &none       &none             &none           &none           &none         &none
&none        &kp PG_UP  &kp _PASTE  &kp UP     &kp _COPY      &kp PG_DN                                             &kp _CUT    &kp _FIND         &kp _FIND_NEXT  &kp _FIND_PREV  &kp _REPLACE  &none
&none        &kp HOME   &kp LEFT    &kp DOWN   &kp RIGHT      &kp END                                               &kp _COPY   &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LEFT_ALT    &kp LEFT_WIN  &none
&kp LS(TAB)  &kp TAB    &kp ENTER   &kp SPACE  &kp BACKSPACE  &kp DELETE  &none  &none  &none  &none  &none  &none  &kp _PASTE  &select_word      &select_line    &select_all     &select_none  &none
&none        &none      &none       &none      &none                      &none  &none  &none  &none  &none  &none              &none             &extend_word    &extend_line    &none         &none
            >;
        };

        mouse {
            bindings = <
&none  &none           &none           &none           &none                                                                                               &none           &none         &none           &none            &none
&none  &none           &none           &none           &none            &none                                                                       &none  &none           &none         &none           &none            &none
&none  &msc SCRL_LEFT  &kp _PASTE      &mmv MOVE_UP    &kp _COPY        &none                                                                       &none  &msc SCRL_LEFT  &msc SCRL_UP  &msc SCRL_DOWN  &msc SCRL_RIGHT  &none
&none  &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP                                                                &none  &mo 7           &mo 6         &mo 8           &mo 5            &none
&none  &none           &none           &none           &none            &none         &mkp MCLK  &kp K_CONTEXT_MENU  &mkp MB5  &none  &none  &none  &none  &mmv MOVE_LEFT  &mmv MOVE_UP  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
&none  &none           &none           &none           &none                          &mkp LCLK  &mkp RCLK           &mkp MB4  &none  &none  &none         &none           &mkp LCLK     &mkp RCLK       &none            &none
            >;
        };

        MouseFine {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        MouseSlow {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        MouseFast {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        MouseWarp {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        function {
            bindings = <
&none  &none         &none         &none             &none                                                                                            &none   &none   &none   &none    &none
&none  &none         &none         &none             &none           &none                                                                     &none  &none   &none   &none   &none    &none
&none  &none         &none         &none             &none           &none                                                                     &none  &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none                                                                     &none  &kp F1  &kp F2  &kp F3  &kp F10  &none
&none  &none         &none         &none             &none           &none  &none  &none  &none  &none           &none       &kp C_MUTE        &none  &kp F7  &kp F8  &kp F9  &kp F12  &none
&none  &none         &none         &none             &none                  &none  &none  &none  &kp C_PREVIOUS  &kp C_NEXT  &kp C_PLAY_PAUSE         &none   &none   &none   &none    &none
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        symbols_old {
            bindings = <
&none        &none      &none         &none         &none                                                                                                           &none                 &none                  &none      &none         &none
&none        &none      &none         &none         &none          &none                                                                         &none              &kp LESS_THAN         &kp GREATER_THAN       &kp MINUS  &none         &none
&none        &kp PG_UP  &kp _PASTE    &kp UP_ARROW  &kp _COPY      &kp PAGE_DOWN                                                                 &kp GRAVE          &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp HASH   &kp CARET     &none
&none        &kp HOME   &kp LEFT      &kp DOWN      &kp RIGHT      &kp END                                                                       &kp DOUBLE_QUOTES  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS  &kp SLASH     &kp EXCL
&kp LS(TAB)  &kp TAB    &kp ENTER     &kp SPACE     &kp BACKSPACE  &kp DELETE     &none  &none  &none  &kp AMPERSAND  &kp SEMICOLON  &kp DOLLAR  &kp SINGLE_QUOTE   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PLUS   &kp ASTERISK  &kp PERCENT
&none        &none      &kp PREV_TAB  &kp NEXT_TAB  &none                         &none  &none  &none  &kp AT_SIGN    &kp COLON      &kp EQUAL                      &none                 &kp PIPE               &kp TILDE  &none         &none
            >;
        };
    };
};
